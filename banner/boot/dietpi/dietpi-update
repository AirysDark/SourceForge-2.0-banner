#!/bin/bash
{
	#////////////////////////////////////
	# SourceForge 2.0 Update
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@sf2.com / sf2.com
	#
	#////////////////////////////////////
	#
	# Info:
	# - Location: /usr/lib/sf2/sf2-update
	# - Updates SourceForge 2.0 from a chosen GitHub repository
	# - Uses pre-patches for patches that need to be done prior to APT calls or SourceForge 2.0 code updates
	# - Uses patches for incremental patching after APT calls and SourceForge 2.0 code updates
	#
	# Usage:
	# - sf2-update	= Check for SourceForge 2.0 update and if available open interactive menu
	#			  Else, if CONFIG_CHECK_APT_UPDATES=[12] is set, check for APT updates and store results to /run/sf2/.apt_updates to be used by SourceForge 2.0-Banner
	# - sf2-update 1	= Check for SourceForge 2.0 update and in case apply noninteractively
	#			  Else, if CONFIG_CHECK_APT_UPDATES=2 is set, check for and apply APT updates noninteractively
	# - sf2-update 2	= Check for SourceForge 2.0 update and in case store result to /run/sf2/.update_available to be used by SourceForge 2.0-Banner
	#			  Else, if CONFIG_CHECK_APT_UPDATES=[12] is set, check for APT updates and store results to /run/sf2/.apt_updates to be used by SourceForge 2.0-Banner
	# - sf2-update -1	= Like "1" but internally reduce subversion by 1 to reapply the last update, e.g. to apply latest dev branch changes
	#////////////////////////////////////

	# Import SourceForge 2.0-Globals --------------------------------------------------------------
	G_LIVE_PATCH_STATUS=() # Reset potentially exported array, to be freshly sourced via SourceForge 2.0-Globals
	. /usr/lib/sf2/func/sf2-globals
	readonly G_PROGRAM_NAME='SourceForge 2.0-Update'
	G_CHECK_ROOT_USER "$@"
	G_CHECK_ROOTFS_RW
	G_INIT
	# Import SourceForge 2.0-Globals --------------------------------------------------------------

	# Grab input
	[[ $1 =~ ^(-?1|2)$ ]] && INPUT=$1 || INPUT=0

	# Prefix G_DIETPI-NOTIFY 3 header text with "Phase" instead of "Mode" when not checking for available updates only
	[[ $INPUT == 2 ]] || G_NOTIFY_3_MODE='Phase'

	#/////////////////////////////////////////////////////////////////////////////////////
	# UPDATE Vars
	#/////////////////////////////////////////////////////////////////////////////////////
	readonly FP_LOG='/var/tmp/sf2/logs/sf2-update.log'

	# Git repo to update from
	GITOWNER_TARGET=$(sed -n '/^[[:blank:]]*DEV_GITOWNER=/{s/^[^=]*=//p;q}' /etc/sf2/config.txt)
	GITOWNER_TARGET=${GITOWNER_TARGET:-MichaIng}
	GITBRANCH_TARGET=$(sed -n '/^[[:blank:]]*DEV_GITBRANCH=/{s/^[^=]*=//p;q}' /etc/sf2/config.txt)
	GITBRANCH_TARGET=${GITBRANCH_TARGET:-master}

	# Remote version variables
	# - Available SourceForge 2.0 version
	G_REMOTE_VERSION_CORE=
	G_REMOTE_VERSION_SUB=
	G_REMOTE_VERSION_RC=
	# - Minimum SourceForge 2.0 version to allow update
	G_MIN_VERSION_CORE=
	G_MIN_VERSION_SUB=
	# - Alternative Git branch to automatically migrate to when version is too low
	G_OLD_VERSION_BRANCH=
	# - Minimum Debian version to allow update
	G_MIN_DEBIAN=
	# - Alternative Git branch to automatically migrate to when Debian version is too low
	G_OLD_DEBIAN_BRANCH=
	# - Live patch arrays
	G_LIVE_PATCH_DESC=()
	G_LIVE_PATCH_COND=()
	G_LIVE_PATCH=()

	# Version info to print to console
	INFO_CURRENT_VERSION=
	INFO_REMOTE_VERSION=
	INFO_VERSIONS_UPDATE(){

		INFO_CURRENT_VERSION="Current version : v$G_DIETPI_VERSION_CORE.$G_DIETPI_VERSION_SUB.$G_DIETPI_VERSION_RC"
		INFO_REMOTE_VERSION="Latest version  : v$G_REMOTE_VERSION_CORE.$G_REMOTE_VERSION_SUB.$G_REMOTE_VERSION_RC"

		# Show Git repo, when it changed
		[[ $G_GITBRANCH != "$GITBRANCH_TARGET" || $G_GITOWNER != "$GITOWNER_TARGET" ]] || return

		INFO_CURRENT_VERSION+=" (branch: $G_GITOWNER/$G_GITBRANCH)"
		INFO_REMOTE_VERSION+=" (branch: $GITOWNER_TARGET/$GITBRANCH_TARGET)"

	}

	Get_Remote_Version(){

		local url="https://raw.githubusercontent.com/$GITOWNER_TARGET/SourceForge 2.0/$GITBRANCH_TARGET/.update/version"

		G_DIETPI-NOTIFY 2 "Getting latest version from: $url"
		if curl -sSfLO "$url"; then

			# Source file
			# shellcheck disable=SC1091
			. version

			# Check if remote version consists of valid integers
			if disable_error=1 G_CHECK_VALIDINT "$G_REMOTE_VERSION_CORE" &&
				disable_error=1 G_CHECK_VALIDINT "$G_REMOTE_VERSION_SUB" &&
				disable_error=1 G_CHECK_VALIDINT "$G_REMOTE_VERSION_RC"; then

				G_DIETPI-NOTIFY 0 "Got valid latest version: $G_REMOTE_VERSION_CORE.$G_REMOTE_VERSION_SUB.$G_REMOTE_VERSION_RC"
				return 0

			else

				G_DIETPI-NOTIFY 1 "Got invalid latest version: ${G_REMOTE_VERSION_CORE:-NULL}.${G_REMOTE_VERSION_SUB:-NULL}.${G_REMOTE_VERSION_RC:-NULL}"

			fi

		else

			G_DIETPI-NOTIFY 1 'Unable to get latest version.'

		fi

		# No valid update server response
		G_DIETPI-NOTIFY 2 'Please check the target Git repository and your network connection, then rerun sf2-update.'
		G_DIETPI-NOTIFY 2 'If this error persists, please report at: https://github.com/MichaIng/SourceForge 2.0/issues'
		return 1

	}

	Apply_1st_Run_Update_Success(){ [[ $G_DIETPI_INSTALL_STAGE == [12] ]] || { G_DIETPI_INSTALL_STAGE=1; G_EXEC eval 'echo 1 > /usr/lib/sf2/.install_stage'; } }

	Check_Git_Migration()
	{
		# Automatically migrate to compatible branch if Debian or SourceForge 2.0 version is too low.
		if (( $G_DISTRO < $G_MIN_DEBIAN ))
		then
			G_DIETPI-NOTIFY 2 "Your Debian version is too low to update to the current branch: $G_DISTRO_NAME ($G_DISTRO)"
			G_DIETPI-NOTIFY 2 "We're switching to a compatible branch: $G_OLD_DEBIAN_BRANCH"
			GITBRANCH_TARGET=$G_OLD_DEBIAN_BRANCH
			Get_Remote_Version || return 1
			G_CONFIG_INJECT 'DEV_GITBRANCH=' "DEV_GITBRANCH=$GITBRANCH_TARGET" /etc/sf2/config.txt
			Check_Git_Migration || return 1

		elif (( $G_DIETPI_VERSION_CORE < $G_MIN_VERSION_CORE || ( $G_DIETPI_VERSION_CORE == $G_MIN_VERSION_CORE && $G_DIETPI_VERSION_SUB < $G_MIN_VERSION_SUB ) ))
		then
			G_DIETPI-NOTIFY 2 "Your SourceForge 2.0 version is too low to update to the current branch: v$G_DIETPI_VERSION_CORE.$G_DIETPI_VERSION_SUB"
			G_DIETPI-NOTIFY 2 "We're switching to a compatible branch: $G_OLD_VERSION_BRANCH"
			GITBRANCH_TARGET=$G_OLD_VERSION_BRANCH
			Get_Remote_Version || return 1
			G_CONFIG_INJECT 'DEV_GITBRANCH=' "DEV_GITBRANCH=$GITBRANCH_TARGET" /etc/sf2/config.txt
			Check_Git_Migration || return 1
		fi
	}

	Check_SourceForge 2.0_Update(){

		# If requested, reduce current subversion by 1 to reapply last update
		if (( $INPUT == -1 )); then

			((G_DIETPI_VERSION_SUB--))
			G_DIETPI_VERSION_RC=0
			G_DIETPI-NOTIFY 2 "Repatch was requested: Subversion reduced to \e[33m\"$G_DIETPI_VERSION_SUB\"\e[90m to reapply the last update"
			INPUT=1

		fi

		local result=1

		# Update available
		if (( $G_DIETPI_VERSION_CORE < $G_REMOTE_VERSION_CORE ||
			( $G_DIETPI_VERSION_CORE == $G_REMOTE_VERSION_CORE && ( $G_DIETPI_VERSION_SUB < $G_REMOTE_VERSION_SUB ||
			( $G_DIETPI_VERSION_SUB == $G_REMOTE_VERSION_SUB && $G_DIETPI_VERSION_RC < $G_REMOTE_VERSION_RC ) ) ) )); then

			result=0

			# Write available update version to flag file
			[[ -d '/run/sf2' ]] || G_EXEC mkdir /run/sf2
			echo "$G_REMOTE_VERSION_CORE.$G_REMOTE_VERSION_SUB.$G_REMOTE_VERSION_RC" > /run/sf2/.update_available

			G_DIETPI-NOTIFY 0 'Update available:'

		# No update required
		else

			# Mark 1st run update as completed
			Apply_1st_Run_Update_Success

			# Remove flag file
			[[ -f '/run/sf2/.update_available' ]] && rm /run/sf2/.update_available

			G_DIETPI-NOTIFY 0 'No update required, your SourceForge 2.0 installation is already up to date:'

		fi

		INFO_VERSIONS_UPDATE
		G_DIETPI-NOTIFY 2 "$INFO_CURRENT_VERSION"
		G_DIETPI-NOTIFY 2 "$INFO_REMOTE_VERSION"

		return "$result"

	}

	Check_Live_Patches()
	{
		# Skip live patches when Git repo changed and remove flag, else patches for repo code may not match installed SourceForge 2.0 code
		[[ $G_GITBRANCH == "$GITBRANCH_TARGET" && $G_GITOWNER == "$GITOWNER_TARGET" ]] || { [[ -f '/run/sf2/.live_patches' ]] && rm /run/sf2/.live_patches; return 1; }

		G_DIETPI-NOTIFY 2 'Checking for new available live patches'

		# Loop through live patches sourced from version file in Get_Remote_Version()
		local i
		for i in "${!G_LIVE_PATCH[@]}"
		do
			# Check whether all expected array entries are set
			if [[ ${G_LIVE_PATCH[$i]} && ${G_LIVE_PATCH_DESC[$i]} && ${G_LIVE_PATCH_COND[$i]} ]]
			then
				# Skip patches already known
				[[ ${G_LIVE_PATCH_STATUS[$i]} ]] && continue

				# Check whether patch is applicable or not
				if eval "${G_LIVE_PATCH_COND[$i]}"
				then
					G_LIVE_PATCH_STATUS[$i]='not applied'

					# When checking for updates only, store flag file
					[[ $INPUT == 2 ]] && > /run/sf2/.live_patches
				else
					G_LIVE_PATCH_STATUS[$i]='not applicable'
				fi

				# Store status of new live patch to /usr/lib/sf2/.version to be sourced by future SourceForge 2.0-Update executions
				G_CONFIG_INJECT "G_LIVE_PATCH_STATUS\[$i\]=" "G_LIVE_PATCH_STATUS[$i]='${G_LIVE_PATCH_STATUS[$i]}'" /usr/lib/sf2/.version
			else
				G_DIETPI-NOTIFY 1 "Found invalid live patch $i:\n${G_LIVE_PATCH_DESC[$i]:-NULL}\n - Condition: ${G_LIVE_PATCH_COND[$i]:-NULL}\n - Patch: ${G_LIVE_PATCH[$i]:-NULL}"
				G_DIETPI-NOTIFY 1 "Please report this issue at: https://github.com/$G_GITOWNER/SourceForge 2.0/issues"
				unset -v "G_LIVE_PATCH[$i]" "G_LIVE_PATCH_DESC[$i]" "G_LIVE_PATCH_COND[$i]"
			fi
		done

		# Remove flag file when patches will be applied or shown in menu (no check only mode)
		[[ $INPUT != 2 && -f '/run/sf2/.live_patches' ]] && rm /run/sf2/.live_patches

		# Return 0 if any applicable and not applied live patch is available, else 1
		for i in "${G_LIVE_PATCH_STATUS[@]}"
		do
			[[ $i == 'not applied' ]] && return 0
		done
		return 1
	}

	# $1: Optional argument to apply a single live patch only, used in menu
	Apply_Live_Patches()
	{
		# If no argument given, apply all applicable and not applied live patches
		# shellcheck disable=SC2066
		for i in "${1:-${!G_LIVE_PATCH[@]}}"
		do
			[[ ${G_LIVE_PATCH_STATUS[$i]} == 'not applied' ]] || continue
			G_DIETPI-NOTIFY 2 "Applying live patch $i: ${G_LIVE_PATCH_DESC[$i]}"
			eval "${G_LIVE_PATCH[$i]}"

			# Store new status of live patch to /usr/lib/sf2/.version
			G_LIVE_PATCH_STATUS[$i]='applied'
			G_CONFIG_INJECT "G_LIVE_PATCH_STATUS\[$i\]=" "G_LIVE_PATCH_STATUS[$i]='${G_LIVE_PATCH_STATUS[$i]}'" /usr/lib/sf2/.version
		done
	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Update SourceForge 2.0
	#/////////////////////////////////////////////////////////////////////////////////////
	Run_SourceForge 2.0_Update(){

		# RC-only update: Reapply last subversion patches
		if (( $G_DIETPI_VERSION_CORE == $G_REMOTE_VERSION_CORE && $G_DIETPI_VERSION_SUB == $G_REMOTE_VERSION_SUB )); then

			((G_DIETPI_VERSION_SUB--))
			G_DIETPI_VERSION_RC=0
			G_DIETPI-NOTIFY 2 "RC update: Subversion intentionally reduced to \e[33m\"$G_DIETPI_VERSION_SUB\"\e[90m to reapply the last update"

		fi

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Applying pre-patches'

		G_EXEC_DESC='Downloading pre-patches' G_EXEC curl -sSfLO "https://raw.githubusercontent.com/$GITOWNER_TARGET/SourceForge 2.0/$GITBRANCH_TARGET/.update/pre-patches"
		G_EXEC_DESC='Applying execute permission' G_EXEC chmod +x pre-patches
		if ! ./pre-patches "$G_DIETPI_VERSION_CORE" "$G_DIETPI_VERSION_SUB"
		then
			G_DIETPI-NOTIFY 1 "An error occurred during pre-patching. Please check the above log or $FP_LOG for errors, and rerun \"sf2-update\" after the cause has been solved."
			exit 1
		fi

		G_DIETPI-NOTIFY 0 'Successfully applied pre-patches'

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Upgrading APT packages'
		G_AGUP
		G_AGUG

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Installing new SourceForge 2.0 code'
		G_EXEC_DESC='Downloading update archive' G_EXEC curl -sSfLO "https://github.com/$GITOWNER_TARGET/SourceForge 2.0/archive/$GITBRANCH_TARGET.tar.gz"
		G_EXEC_DESC='Unpacking update archive' G_EXEC tar xf "${GITBRANCH_TARGET##*/}.tar.gz" # Support for Git branch names with forward slashes
		G_EXEC_DESC='Removing update archive' G_EXEC rm "${GITBRANCH_TARGET##*/}.tar.gz"
		local dir="SourceForge 2.0-${GITBRANCH_TARGET//\//-}" # GitHub translates forward slashes into dashes
		G_EXEC_DESC='Hardening update archive mode' G_EXEC chmod -R g-w "$dir"
		G_EXEC_DESC='Installing new SourceForge 2.0 scripts' G_EXEC cp -a "$dir/sf2" /boot/
		G_EXEC_DESC='Installing new SourceForge 2.0 system files' G_EXEC cp -a "$dir/rootfs/." /

		# Save version + Git info now for sub scripts to pull from correct branch
		G_GITOWNER=$GITOWNER_TARGET
		G_GITBRANCH=$GITBRANCH_TARGET
		G_VERSIONDB_SAVE

		# Verify/update sf2.txt entries
		if ! /usr/lib/sf2/func/sf2-set_software verify_sf2.txt; then

			G_DIETPI-NOTIFY 1 "An error occurred during sf2.txt updates. Please check the above log or $FP_LOG for errors, and rerun \"sf2-update\" after the cause has been solved."
			exit 1

		fi

		# Failsafe: Force sync to disk
		G_EXEC sync

		# Reload systemd units
		G_EXEC systemctl daemon-reload

		G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Applying incremental patches'
		INFO_VERSIONS_UPDATE
		G_DIETPI-NOTIFY 2 "$INFO_CURRENT_VERSION"
		G_DIETPI-NOTIFY 2 "$INFO_REMOTE_VERSION"

		if ! "$dir/.update/patches"; then

			G_DIETPI-NOTIFY 1 "An error occurred during incremental patching. Please check the above log or $FP_LOG for errors, and rerun \"sf2-update\" after the cause has been solved."
			exit 1

		fi

		# Autoremove possibly obsolete DEB packages and reload systemd units
		G_AGA
		G_EXEC systemctl daemon-reload

		G_DIETPI_VERSION_CORE=$G_REMOTE_VERSION_CORE
		G_DIETPI_VERSION_SUB=$G_REMOTE_VERSION_SUB
		G_DIETPI_VERSION_RC=$G_REMOTE_VERSION_RC
		G_VERSIONDB_SAVE
		G_DIETPI-NOTIFY 0 "Incremental patching to v$G_REMOTE_VERSION_CORE.$G_REMOTE_VERSION_SUB.$G_REMOTE_VERSION_RC completed"

		# Reset, check for, and apply all applicable live patches
		G_LIVE_PATCH_STATUS=()
		Check_Live_Patches && Apply_Live_Patches

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# MENUS
	#/////////////////////////////////////////////////////////////////////////////////////
	Get_View_Changelog(){

		[[ -f 'CHANGELOG.txt' ]] || G_EXEC_NOEXIT=1 G_EXEC curl -sSfLO "https://raw.githubusercontent.com/$GITOWNER_TARGET/SourceForge 2.0/$GITBRANCH_TARGET/CHANGELOG.txt" || return 1
		G_WHIP_VIEWFILE	CHANGELOG.txt

	}

	Menu_Update(){

		while :
		do
			G_WHIP_BUTTON_CANCEL_TEXT='Exit'
			G_WHIP_MENU_ARRAY=(

				'' '●─ Update SourceForge 2.0 '
				'Update' ": Apply update to: v$G_REMOTE_VERSION_CORE.$G_REMOTE_VERSION_SUB.$G_REMOTE_VERSION_RC"
				'' '●─ Additional Options '
				'Changelog' ': View recent changelog and patch notes.'
				'Backup' ': Create a system backup before updating.'

			)

			G_WHIP_DEFAULT_ITEM='Update'
			if G_WHIP_MENU "Update available:\n - $INFO_CURRENT_VERSION\n - $INFO_REMOTE_VERSION\n
Please select 'Update' option to apply the update."; then

				if [[ $G_WHIP_RETURNED_VALUE == 'Update' ]]; then

					G_WHIP_SIZE_X_MAX=80
					G_WHIP_YESNO ">----------------------------------Notice----------------------------------<
- A benefit of SourceForge 2.0 is: We use standard Linux (Debian) configurations and commands.
- A potential downside is: We can't possibly accommodate or predict all modification to Linux configurations files by the end user, outside of SourceForge 2.0 programs, during updates.\n
Although we test the updates thoroughly, if you have made any custom changes to Linux configuration files outside of the SourceForge 2.0 programs, an update may trigger a potential issue.
>--------------------------------------------------------------------------<\n
Do you wish to continue and update SourceForge 2.0 to v$G_REMOTE_VERSION_CORE.$G_REMOTE_VERSION_SUB.$G_REMOTE_VERSION_RC?" && return 0

				elif [[ $G_WHIP_RETURNED_VALUE == 'Changelog' ]]; then

					Get_View_Changelog

				elif [[ $G_WHIP_RETURNED_VALUE == 'Backup' ]]; then

					G_PROMPT_BACKUP

				fi

			else

				return 1 # Exit

			fi
		done

	}

	Menu_Live_Patches()
	{
		local i G_WHIP_MENU_ARRAY G_WHIP_LAST_ITEM=0 info
		while :
		do
			G_WHIP_MENU_ARRAY=()
			for i in "${!G_LIVE_PATCH[@]}"
			do
				G_WHIP_MENU_ARRAY+=("$i" ": [${G_LIVE_PATCH_STATUS[$i]}] ${G_LIVE_PATCH_DESC[$i]}")
			done

			G_WHIP_BUTTON_CANCEL_TEXT='Exit'
			G_WHIP_DEFAULT_ITEM=$G_WHIP_LAST_ITEM
			if G_WHIP_MENU 'No SourceForge 2.0 update is available, but live patches have been found for your current version to fix little bugs until the next version is released.\n\nSelect a patch below for further details:'
			then
				i=$G_WHIP_RETURNED_VALUE
				G_WHIP_LAST_ITEM=$i

				info="Live patch $i:\n\n${G_LIVE_PATCH_DESC[$i]}\n\nCondition: ${G_LIVE_PATCH_COND[$i]}\n\nPatch: ${G_LIVE_PATCH[$i]}"

				# Not applicable
				if [[ ${G_LIVE_PATCH_STATUS[$i]} == 'not applicable' ]]
				then
					G_WHIP_MSG "$info\n\nYour system does not fulfil the conditions for this patch."

				# Already applied
				elif [[ ${G_LIVE_PATCH_STATUS[$i]} == 'applied' ]]
				then
					G_WHIP_MSG "$info\n\nThis patch has been applied already."

				# Applicable and not applied yet
				elif G_WHIP_YESNO "$info\n\nDo you want to apply this patch now?"
				then
					Apply_Live_Patches "$i"
				fi
			else
				return 0 # Exit
			fi
		done
	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////
	#----------------------------------------------------------------
	G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Checking for available SourceForge 2.0 update'
	#----------------------------------------------------------------
	# Check network connectivity and sync system clock
	G_CHECK_NET
	/usr/lib/sf2/func/run_ntpd
	#----------------------------------------------------------------
	# Check for valid Git repository
	if Get_Remote_Version && Check_Git_Migration
	then
		# Check for SourceForge 2.0 update and in case store result to /run/sf2/.update_available for use by SourceForge 2.0-Banner
		if Check_SourceForge 2.0_Update
		then
			# Exit if check-only input
			(( $INPUT == 2 )) && exit 0

			G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Checking for update pre-requirements'

			# Verify userdata location
			G_CHECK_USERDATA

			# Check for sufficient free space
			G_CHECK_FREESPACE / 100 || exit 1

			# Noninteractive update or ask user
			if (( $INPUT == 1 )) || Menu_Update
			then
				# Disable powersaving on main screen
				setterm -blank 0 -powersave off 2> /dev/null

				# Stop Services
				/usr/lib/sf2/sf2-services stop

				# Run_SourceForge 2.0_Update: https://github.com/MichaIng/SourceForge 2.0/issues/1877#issuecomment-403866204
				# - Log to file by redirecting to subshell instead of piping, else G_EXEC cannot exit the script via "kill -INT $$": https://github.com/MichaIng/SourceForge 2.0/issues/3127
				Run_SourceForge 2.0_Update &> >(tee "$FP_LOG"); wait $!

				# Mark 1st run update as completed
				Apply_1st_Run_Update_Success

				# Remove .update_available flag file
				rm /run/sf2/.update_available

				G_DIETPI-NOTIFY 3 "$G_PROGRAM_NAME" 'Completed'
				INFO_VERSIONS_UPDATE
				G_DIETPI-NOTIFY 2 "$INFO_CURRENT_VERSION"
				G_DIETPI-NOTIFY 2 "$INFO_REMOTE_VERSION"

				# Update SourceForge 2.0-Survey
				/usr/lib/sf2/sf2-survey 1

				# Failsafe: Force sync to disk
				G_EXEC sync

				# Offer to do a reboot if required as of missing kernel modules, do it automatically on first run setup
				if ! G_CHECK_KERNEL
				then
					if [[ $G_DIETPI_INSTALL_STAGE == 1 ]]
					then
						G_DIETPI-NOTIFY 2 'A reboot is done to finalise the kernel upgrade'
						reboot
					else
						G_WHIP_BUTTON_CANCEL_TEXT='Skip' G_WHIP_YESNO "[ INFO ] A reboot is recommended
\nKernel modules for the loaded kernel at /lib/modules/$(uname -r) are missing. This is most likely the case as of a recently applied kernel upgrade where a reboot is required to load the new kernel.
\nWe recommend to perform a reboot now for the system to be able to load kernel modules ondemand. If your kernel does not use dedicated modules, please create the mentioned directory manually to mute this info in the future.
\nDo you want to reboot now?" && reboot
					fi
				fi

				# Start services only on finished install state, else sf2-software will follow immediately
				(( $G_DIETPI_INSTALL_STAGE == 2 )) && /usr/lib/sf2/sf2-services restart
			fi

			# Desktop run, exit key prompt
			[[ $DISPLAY ]] && read -rp "Press any key to exit $G_PROGRAM_NAME..."
			exit 0

		# No update available: Check for live patches
		elif Check_Live_Patches
		then
			# Forced update mode
			if (( $INPUT == 1 ))
			then
				Apply_Live_Patches

			# Menu mode
			elif (( $INPUT == 0 ))
			then
				Menu_Live_Patches
				exit 0
			fi
		fi
	fi

	# If no SourceForge 2.0 update is available, check for and in case apply APT updates based on input mode and sf2.txt choice
	mode=$(sed -n '/^[[:blank:]]*CONFIG_CHECK_APT_UPDATES=/{s/^[^=]*=//p;q}' /etc/sf2/config.txt)
	# Forced update input and mode 2: Apply APT updates if available
	if [[ $INPUT == 1 && $mode == 2 ]]
	then
		G_AGUP -v
		# shellcheck disable=SC2154
		(( $G_AGUP_COUNT )) && G_AGUG &> >(tee /var/tmp/sf2/logs/sf2-upgrade_apt.log)

	# No forced update input but APT updates check not disabled: Check for APT updates and store result to /run/sf2/.apt_updates to be used by SourceForge 2.0-Banner
	elif [[ $mode != 0 ]]
	then
		G_AGUP -f
	fi
	#----------------------------------------------------------------
	exit 0
	#----------------------------------------------------------------
}
