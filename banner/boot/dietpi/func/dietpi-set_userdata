#!/bin/bash
{
	#////////////////////////////////////
	# SourceForge 2.0 Function:
	#
	#////////////////////////////////////
	# Created by Daniel Knight / daniel.knight@sf2.com / sf2.com
	#
	#////////////////////////////////////
	#
	# Info:
	# - Sets up user data directory.
	# - Allows automated moving of user data in SourceForge 2.0. Automatically generates a symlink from /mnt/sf2_userdata to target directory if needed.
	#
	# Usage:
	# - /usr/lib/sf2/func/sf2-set_userdata FP_SOURCE FP_TARGET | Setup user data directory, move data if needed. If FP_TARGET='auto', auto target location. Returns 1 if failed.
	#////////////////////////////////////

	# Import SourceForge 2.0-Globals --------------------------------------------------------------
	. /usr/lib/sf2/func/sf2-globals
	readonly G_PROGRAM_NAME='SourceForge 2.0-Set_userdata'
	G_CHECK_ROOT_USER "$@"
	G_INIT
	# Import SourceForge 2.0-Globals --------------------------------------------------------------

	EXIT_CODE=0

	# Grab input
	# - Remove trailing slashes
	FP_SOURCE=${1%/}
	FP_TARGET=${2%/}

	readonly FP_LOG='/var/tmp/sf2/logs/sf2-set_userdata.log'
	LOGFILE_OUTPUT_TEXT=
	TARGET_FS_TYPE=
	FREESPACE_REQUIRED_SOURCE=0

	Run_Move_Data(){

		# Stop all running services
		/usr/lib/sf2/sf2-services stop

		G_DIETPI-NOTIFY 2 "Moving your existing data from $FP_SOURCE to $FP_TARGET, please wait..."

		# Begin transfer
		if cp -a "$FP_SOURCE/." "$FP_TARGET/"; then

			# Remove source
			rm -R "$FP_SOURCE"

			# Create symlink at /mnt/sf2_userdata if required
			if [[ $FP_TARGET != '/mnt/sf2_userdata' ]]; then

				rm -Rf /mnt/sf2_userdata
				ln -s "$FP_TARGET" /mnt/sf2_userdata

			fi

			# Apply sf2:sf2 owner, used by some software titles like Syncthing and file servers to permit creating files and directories
			chown sf2:sf2 "$FP_TARGET"

			LOGFILE_OUTPUT_TEXT="Successfully moved your data from $FP_SOURCE to $FP_TARGET."

		else

			LOGFILE_OUTPUT_TEXT="Failed to copy $FP_SOURCE/ to $FP_TARGET."
			EXIT_CODE=1

		fi

		# Start services back up again
		/usr/lib/sf2/sf2-services start

	}

	#/////////////////////////////////////////////////////////////////////////////////////
	# Main Loop
	#/////////////////////////////////////////////////////////////////////////////////////

	G_DIETPI-NOTIFY 3 'SourceForge 2.0 Updating user data location'
	G_DIETPI-NOTIFY 2 " - From : $FP_SOURCE"
	G_DIETPI-NOTIFY 2 " - To   : $FP_TARGET"
	G_DIETPI-NOTIFY 2 'Please wait...'

	# Sanity checks
	# - Check for both inputs
	if ! [[ $FP_SOURCE && $FP_TARGET ]]; then

		LOGFILE_OUTPUT_TEXT="Please provide a source ($FP_SOURCE) and target ($FP_TARGET) directory for input."
		EXIT_CODE=1

	# - Check if symlink is already pointing to target directory
	elif [[ $(readlink -f /mnt/sf2_userdata) == "$FP_TARGET" ]]; then

		LOGFILE_OUTPUT_TEXT="/mnt/sf2_userdata has already been moved to $FP_TARGET, nothing to do."

	# - Check if source directory exists
	elif [[ ! -d $FP_SOURCE ]]; then

		LOGFILE_OUTPUT_TEXT="Source directory $FP_SOURCE does not exist."
		EXIT_CODE=1

	# - Check for disallowed directory match
	elif [[ $FP_SOURCE == "$FP_TARGET" || $FP_SOURCE == "$FP_TARGET/"* || $FP_TARGET == "$FP_SOURCE/"* ]]; then

		LOGFILE_OUTPUT_TEXT="$FP_SOURCE and $FP_TARGET cannot be within each other. Disallowed directory match."
		EXIT_CODE=1

	# - Only allow full path
	elif [[ $FP_SOURCE != '/'* || $FP_TARGET != '/'* ]]; then

		LOGFILE_OUTPUT_TEXT="Source ($FP_SOURCE) and target directories ($FP_TARGET) must be given with absolute path, e.g.: /mnt/drive1"
		EXIT_CODE=1

	else
		# Remove /mnt/sf2_userdata symlink, if chosen as target
		[[ $FP_TARGET == '/mnt/sf2_userdata' && -L '/mnt/sf2_userdata' ]] && G_EXEC rm /mnt/sf2_userdata

		# Create target directory
		G_EXEC mkdir -p "$FP_TARGET"

		# Check for supported filesystem type
		TARGET_FS_TYPE=$(df -T "$FP_TARGET" | mawk 'NR==2 {print $2}')
		if [[ ! $TARGET_FS_TYPE =~ ^(ext[2-4]|(f2|btr|x|z)fs)$ ]]
		then
			LOGFILE_OUTPUT_TEXT="Filesystem type $TARGET_FS_TYPE of $FP_TARGET is not supported for transferring SourceForge 2.0 user data. Transfer aborted.\n - The filesystem type must be ext2/3/4, F2FS, Btrfs, XFS or ZFS for native symlink and UNIX permissions compatibilities."
			EXIT_CODE=1
		else
			# Check for sufficient free space in target directory
			# - "-m" => result in MiB actual disk usage, respecting disk block size, e.g. "144"
			# - Trailing slash required with "du" to correctly check symlink target in case
			FREESPACE_REQUIRED_SOURCE=$(du -sm "$FP_SOURCE/" | mawk '{print $1}')
			if ! G_CHECK_FREESPACE "$FP_TARGET" "$FREESPACE_REQUIRED_SOURCE"
			then
				LOGFILE_OUTPUT_TEXT="Not enough free space in target directory $FP_TARGET.\n - Required: $FREESPACE_REQUIRED_SOURCE MiB"
				EXIT_CODE=1
			else
				# Run, attempt to move data.
				Run_Move_Data
			fi
		fi
	fi

	#-----------------------------------------------------------------------------------
	# Print results and send to logfile
	if [[ $LOGFILE_OUTPUT_TEXT ]]; then

		# Failed
		if (( $EXIT_CODE )); then

			G_DIETPI-NOTIFY 1 "$LOGFILE_OUTPUT_TEXT"
			echo -e "[FAILED] $LOGFILE_OUTPUT_TEXT" > "$FP_LOG"

		# Ok
		else

			G_DIETPI-NOTIFY 0 "$LOGFILE_OUTPUT_TEXT"
			echo -e "[  OK  ] $LOGFILE_OUTPUT_TEXT" > "$FP_LOG"

		fi

	fi

	#-----------------------------------------------------------------------------------
	G_DIETPI-NOTIFY -1 "$EXIT_CODE" "$G_PROGRAM_NAME"
	exit "$EXIT_CODE"
	#-----------------------------------------------------------------------------------
}
